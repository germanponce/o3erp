/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package o3erp.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-10-29")
public class BaseService {

  public interface Iface {

    public Map<String,String> userLogin(String userLoginId, String loginPwd) throws org.apache.thrift.TException;

    public Map<String,String> hasPermission(String userLoginId, List<String> permissions) throws org.apache.thrift.TException;

    public Map<String,String> hasEntityPermission(String userLoginId, List<String> entities, List<String> actions) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void userLogin(String userLoginId, String loginPwd, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hasPermission(String userLoginId, List<String> permissions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hasEntityPermission(String userLoginId, List<String> entities, List<String> actions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<String,String> userLogin(String userLoginId, String loginPwd) throws org.apache.thrift.TException
    {
      send_userLogin(userLoginId, loginPwd);
      return recv_userLogin();
    }

    public void send_userLogin(String userLoginId, String loginPwd) throws org.apache.thrift.TException
    {
      userLogin_args args = new userLogin_args();
      args.setUserLoginId(userLoginId);
      args.setLoginPwd(loginPwd);
      sendBase("userLogin", args);
    }

    public Map<String,String> recv_userLogin() throws org.apache.thrift.TException
    {
      userLogin_result result = new userLogin_result();
      receiveBase(result, "userLogin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userLogin failed: unknown result");
    }

    public Map<String,String> hasPermission(String userLoginId, List<String> permissions) throws org.apache.thrift.TException
    {
      send_hasPermission(userLoginId, permissions);
      return recv_hasPermission();
    }

    public void send_hasPermission(String userLoginId, List<String> permissions) throws org.apache.thrift.TException
    {
      hasPermission_args args = new hasPermission_args();
      args.setUserLoginId(userLoginId);
      args.setPermissions(permissions);
      sendBase("hasPermission", args);
    }

    public Map<String,String> recv_hasPermission() throws org.apache.thrift.TException
    {
      hasPermission_result result = new hasPermission_result();
      receiveBase(result, "hasPermission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hasPermission failed: unknown result");
    }

    public Map<String,String> hasEntityPermission(String userLoginId, List<String> entities, List<String> actions) throws org.apache.thrift.TException
    {
      send_hasEntityPermission(userLoginId, entities, actions);
      return recv_hasEntityPermission();
    }

    public void send_hasEntityPermission(String userLoginId, List<String> entities, List<String> actions) throws org.apache.thrift.TException
    {
      hasEntityPermission_args args = new hasEntityPermission_args();
      args.setUserLoginId(userLoginId);
      args.setEntities(entities);
      args.setActions(actions);
      sendBase("hasEntityPermission", args);
    }

    public Map<String,String> recv_hasEntityPermission() throws org.apache.thrift.TException
    {
      hasEntityPermission_result result = new hasEntityPermission_result();
      receiveBase(result, "hasEntityPermission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hasEntityPermission failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void userLogin(String userLoginId, String loginPwd, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userLogin_call method_call = new userLogin_call(userLoginId, loginPwd, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userLogin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userLoginId;
      private String loginPwd;
      public userLogin_call(String userLoginId, String loginPwd, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userLoginId = userLoginId;
        this.loginPwd = loginPwd;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userLogin_args args = new userLogin_args();
        args.setUserLoginId(userLoginId);
        args.setLoginPwd(loginPwd);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userLogin();
      }
    }

    public void hasPermission(String userLoginId, List<String> permissions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hasPermission_call method_call = new hasPermission_call(userLoginId, permissions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hasPermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userLoginId;
      private List<String> permissions;
      public hasPermission_call(String userLoginId, List<String> permissions, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userLoginId = userLoginId;
        this.permissions = permissions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hasPermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hasPermission_args args = new hasPermission_args();
        args.setUserLoginId(userLoginId);
        args.setPermissions(permissions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hasPermission();
      }
    }

    public void hasEntityPermission(String userLoginId, List<String> entities, List<String> actions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hasEntityPermission_call method_call = new hasEntityPermission_call(userLoginId, entities, actions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hasEntityPermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userLoginId;
      private List<String> entities;
      private List<String> actions;
      public hasEntityPermission_call(String userLoginId, List<String> entities, List<String> actions, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userLoginId = userLoginId;
        this.entities = entities;
        this.actions = actions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hasEntityPermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hasEntityPermission_args args = new hasEntityPermission_args();
        args.setUserLoginId(userLoginId);
        args.setEntities(entities);
        args.setActions(actions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hasEntityPermission();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("userLogin", new userLogin());
      processMap.put("hasPermission", new hasPermission());
      processMap.put("hasEntityPermission", new hasEntityPermission());
      return processMap;
    }

    public static class userLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userLogin_args> {
      public userLogin() {
        super("userLogin");
      }

      public userLogin_args getEmptyArgsInstance() {
        return new userLogin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userLogin_result getResult(I iface, userLogin_args args) throws org.apache.thrift.TException {
        userLogin_result result = new userLogin_result();
        result.success = iface.userLogin(args.userLoginId, args.loginPwd);
        return result;
      }
    }

    public static class hasPermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hasPermission_args> {
      public hasPermission() {
        super("hasPermission");
      }

      public hasPermission_args getEmptyArgsInstance() {
        return new hasPermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hasPermission_result getResult(I iface, hasPermission_args args) throws org.apache.thrift.TException {
        hasPermission_result result = new hasPermission_result();
        result.success = iface.hasPermission(args.userLoginId, args.permissions);
        return result;
      }
    }

    public static class hasEntityPermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hasEntityPermission_args> {
      public hasEntityPermission() {
        super("hasEntityPermission");
      }

      public hasEntityPermission_args getEmptyArgsInstance() {
        return new hasEntityPermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hasEntityPermission_result getResult(I iface, hasEntityPermission_args args) throws org.apache.thrift.TException {
        hasEntityPermission_result result = new hasEntityPermission_result();
        result.success = iface.hasEntityPermission(args.userLoginId, args.entities, args.actions);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("userLogin", new userLogin());
      processMap.put("hasPermission", new hasPermission());
      processMap.put("hasEntityPermission", new hasEntityPermission());
      return processMap;
    }

    public static class userLogin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userLogin_args, Map<String,String>> {
      public userLogin() {
        super("userLogin");
      }

      public userLogin_args getEmptyArgsInstance() {
        return new userLogin_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            userLogin_result result = new userLogin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userLogin_result result = new userLogin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userLogin_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.userLogin(args.userLoginId, args.loginPwd,resultHandler);
      }
    }

    public static class hasPermission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hasPermission_args, Map<String,String>> {
      public hasPermission() {
        super("hasPermission");
      }

      public hasPermission_args getEmptyArgsInstance() {
        return new hasPermission_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            hasPermission_result result = new hasPermission_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hasPermission_result result = new hasPermission_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hasPermission_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.hasPermission(args.userLoginId, args.permissions,resultHandler);
      }
    }

    public static class hasEntityPermission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hasEntityPermission_args, Map<String,String>> {
      public hasEntityPermission() {
        super("hasEntityPermission");
      }

      public hasEntityPermission_args getEmptyArgsInstance() {
        return new hasEntityPermission_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            hasEntityPermission_result result = new hasEntityPermission_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hasEntityPermission_result result = new hasEntityPermission_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hasEntityPermission_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.hasEntityPermission(args.userLoginId, args.entities, args.actions,resultHandler);
      }
    }

  }

  public static class userLogin_args implements org.apache.thrift.TBase<userLogin_args, userLogin_args._Fields>, java.io.Serializable, Cloneable, Comparable<userLogin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userLogin_args");

    private static final org.apache.thrift.protocol.TField USER_LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userLoginId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOGIN_PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("loginPwd", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userLogin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userLogin_argsTupleSchemeFactory());
    }

    public String userLoginId; // required
    public String loginPwd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_LOGIN_ID((short)1, "userLoginId"),
      LOGIN_PWD((short)2, "loginPwd");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_LOGIN_ID
            return USER_LOGIN_ID;
          case 2: // LOGIN_PWD
            return LOGIN_PWD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("userLoginId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOGIN_PWD, new org.apache.thrift.meta_data.FieldMetaData("loginPwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userLogin_args.class, metaDataMap);
    }

    public userLogin_args() {
    }

    public userLogin_args(
      String userLoginId,
      String loginPwd)
    {
      this();
      this.userLoginId = userLoginId;
      this.loginPwd = loginPwd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userLogin_args(userLogin_args other) {
      if (other.isSetUserLoginId()) {
        this.userLoginId = other.userLoginId;
      }
      if (other.isSetLoginPwd()) {
        this.loginPwd = other.loginPwd;
      }
    }

    public userLogin_args deepCopy() {
      return new userLogin_args(this);
    }

    @Override
    public void clear() {
      this.userLoginId = null;
      this.loginPwd = null;
    }

    public String getUserLoginId() {
      return this.userLoginId;
    }

    public userLogin_args setUserLoginId(String userLoginId) {
      this.userLoginId = userLoginId;
      return this;
    }

    public void unsetUserLoginId() {
      this.userLoginId = null;
    }

    /** Returns true if field userLoginId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserLoginId() {
      return this.userLoginId != null;
    }

    public void setUserLoginIdIsSet(boolean value) {
      if (!value) {
        this.userLoginId = null;
      }
    }

    public String getLoginPwd() {
      return this.loginPwd;
    }

    public userLogin_args setLoginPwd(String loginPwd) {
      this.loginPwd = loginPwd;
      return this;
    }

    public void unsetLoginPwd() {
      this.loginPwd = null;
    }

    /** Returns true if field loginPwd is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginPwd() {
      return this.loginPwd != null;
    }

    public void setLoginPwdIsSet(boolean value) {
      if (!value) {
        this.loginPwd = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_LOGIN_ID:
        if (value == null) {
          unsetUserLoginId();
        } else {
          setUserLoginId((String)value);
        }
        break;

      case LOGIN_PWD:
        if (value == null) {
          unsetLoginPwd();
        } else {
          setLoginPwd((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_LOGIN_ID:
        return getUserLoginId();

      case LOGIN_PWD:
        return getLoginPwd();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_LOGIN_ID:
        return isSetUserLoginId();
      case LOGIN_PWD:
        return isSetLoginPwd();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userLogin_args)
        return this.equals((userLogin_args)that);
      return false;
    }

    public boolean equals(userLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_userLoginId = true && this.isSetUserLoginId();
      boolean that_present_userLoginId = true && that.isSetUserLoginId();
      if (this_present_userLoginId || that_present_userLoginId) {
        if (!(this_present_userLoginId && that_present_userLoginId))
          return false;
        if (!this.userLoginId.equals(that.userLoginId))
          return false;
      }

      boolean this_present_loginPwd = true && this.isSetLoginPwd();
      boolean that_present_loginPwd = true && that.isSetLoginPwd();
      if (this_present_loginPwd || that_present_loginPwd) {
        if (!(this_present_loginPwd && that_present_loginPwd))
          return false;
        if (!this.loginPwd.equals(that.loginPwd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userLoginId = true && (isSetUserLoginId());
      list.add(present_userLoginId);
      if (present_userLoginId)
        list.add(userLoginId);

      boolean present_loginPwd = true && (isSetLoginPwd());
      list.add(present_loginPwd);
      if (present_loginPwd)
        list.add(loginPwd);

      return list.hashCode();
    }

    @Override
    public int compareTo(userLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserLoginId()).compareTo(other.isSetUserLoginId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserLoginId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLoginId, other.userLoginId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoginPwd()).compareTo(other.isSetLoginPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginPwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginPwd, other.loginPwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userLogin_args(");
      boolean first = true;

      sb.append("userLoginId:");
      if (this.userLoginId == null) {
        sb.append("null");
      } else {
        sb.append(this.userLoginId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("loginPwd:");
      if (this.loginPwd == null) {
        sb.append("null");
      } else {
        sb.append(this.loginPwd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userLogin_argsStandardSchemeFactory implements SchemeFactory {
      public userLogin_argsStandardScheme getScheme() {
        return new userLogin_argsStandardScheme();
      }
    }

    private static class userLogin_argsStandardScheme extends StandardScheme<userLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_LOGIN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userLoginId = iprot.readString();
                struct.setUserLoginIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOGIN_PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.loginPwd = iprot.readString();
                struct.setLoginPwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userLoginId != null) {
          oprot.writeFieldBegin(USER_LOGIN_ID_FIELD_DESC);
          oprot.writeString(struct.userLoginId);
          oprot.writeFieldEnd();
        }
        if (struct.loginPwd != null) {
          oprot.writeFieldBegin(LOGIN_PWD_FIELD_DESC);
          oprot.writeString(struct.loginPwd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userLogin_argsTupleSchemeFactory implements SchemeFactory {
      public userLogin_argsTupleScheme getScheme() {
        return new userLogin_argsTupleScheme();
      }
    }

    private static class userLogin_argsTupleScheme extends TupleScheme<userLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserLoginId()) {
          optionals.set(0);
        }
        if (struct.isSetLoginPwd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserLoginId()) {
          oprot.writeString(struct.userLoginId);
        }
        if (struct.isSetLoginPwd()) {
          oprot.writeString(struct.loginPwd);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userLoginId = iprot.readString();
          struct.setUserLoginIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.loginPwd = iprot.readString();
          struct.setLoginPwdIsSet(true);
        }
      }
    }

  }

  public static class userLogin_result implements org.apache.thrift.TBase<userLogin_result, userLogin_result._Fields>, java.io.Serializable, Cloneable, Comparable<userLogin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userLogin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userLogin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userLogin_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userLogin_result.class, metaDataMap);
    }

    public userLogin_result() {
    }

    public userLogin_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userLogin_result(userLogin_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public userLogin_result deepCopy() {
      return new userLogin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public userLogin_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userLogin_result)
        return this.equals((userLogin_result)that);
      return false;
    }

    public boolean equals(userLogin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userLogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userLogin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userLogin_resultStandardSchemeFactory implements SchemeFactory {
      public userLogin_resultStandardScheme getScheme() {
        return new userLogin_resultStandardScheme();
      }
    }

    private static class userLogin_resultStandardScheme extends StandardScheme<userLogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map0.size);
                  String _key1;
                  String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.success.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userLogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter4 : struct.success.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userLogin_resultTupleSchemeFactory implements SchemeFactory {
      public userLogin_resultTupleScheme getScheme() {
        return new userLogin_resultTupleScheme();
      }
    }

    private static class userLogin_resultTupleScheme extends TupleScheme<userLogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter5 : struct.success.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map6.size);
            String _key7;
            String _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readString();
              _val8 = iprot.readString();
              struct.success.put(_key7, _val8);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class hasPermission_args implements org.apache.thrift.TBase<hasPermission_args, hasPermission_args._Fields>, java.io.Serializable, Cloneable, Comparable<hasPermission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hasPermission_args");

    private static final org.apache.thrift.protocol.TField USER_LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userLoginId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("permissions", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hasPermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hasPermission_argsTupleSchemeFactory());
    }

    public String userLoginId; // required
    public List<String> permissions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_LOGIN_ID((short)1, "userLoginId"),
      PERMISSIONS((short)2, "permissions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_LOGIN_ID
            return USER_LOGIN_ID;
          case 2: // PERMISSIONS
            return PERMISSIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("userLoginId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("permissions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hasPermission_args.class, metaDataMap);
    }

    public hasPermission_args() {
    }

    public hasPermission_args(
      String userLoginId,
      List<String> permissions)
    {
      this();
      this.userLoginId = userLoginId;
      this.permissions = permissions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hasPermission_args(hasPermission_args other) {
      if (other.isSetUserLoginId()) {
        this.userLoginId = other.userLoginId;
      }
      if (other.isSetPermissions()) {
        List<String> __this__permissions = new ArrayList<String>(other.permissions);
        this.permissions = __this__permissions;
      }
    }

    public hasPermission_args deepCopy() {
      return new hasPermission_args(this);
    }

    @Override
    public void clear() {
      this.userLoginId = null;
      this.permissions = null;
    }

    public String getUserLoginId() {
      return this.userLoginId;
    }

    public hasPermission_args setUserLoginId(String userLoginId) {
      this.userLoginId = userLoginId;
      return this;
    }

    public void unsetUserLoginId() {
      this.userLoginId = null;
    }

    /** Returns true if field userLoginId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserLoginId() {
      return this.userLoginId != null;
    }

    public void setUserLoginIdIsSet(boolean value) {
      if (!value) {
        this.userLoginId = null;
      }
    }

    public int getPermissionsSize() {
      return (this.permissions == null) ? 0 : this.permissions.size();
    }

    public java.util.Iterator<String> getPermissionsIterator() {
      return (this.permissions == null) ? null : this.permissions.iterator();
    }

    public void addToPermissions(String elem) {
      if (this.permissions == null) {
        this.permissions = new ArrayList<String>();
      }
      this.permissions.add(elem);
    }

    public List<String> getPermissions() {
      return this.permissions;
    }

    public hasPermission_args setPermissions(List<String> permissions) {
      this.permissions = permissions;
      return this;
    }

    public void unsetPermissions() {
      this.permissions = null;
    }

    /** Returns true if field permissions is set (has been assigned a value) and false otherwise */
    public boolean isSetPermissions() {
      return this.permissions != null;
    }

    public void setPermissionsIsSet(boolean value) {
      if (!value) {
        this.permissions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_LOGIN_ID:
        if (value == null) {
          unsetUserLoginId();
        } else {
          setUserLoginId((String)value);
        }
        break;

      case PERMISSIONS:
        if (value == null) {
          unsetPermissions();
        } else {
          setPermissions((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_LOGIN_ID:
        return getUserLoginId();

      case PERMISSIONS:
        return getPermissions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_LOGIN_ID:
        return isSetUserLoginId();
      case PERMISSIONS:
        return isSetPermissions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hasPermission_args)
        return this.equals((hasPermission_args)that);
      return false;
    }

    public boolean equals(hasPermission_args that) {
      if (that == null)
        return false;

      boolean this_present_userLoginId = true && this.isSetUserLoginId();
      boolean that_present_userLoginId = true && that.isSetUserLoginId();
      if (this_present_userLoginId || that_present_userLoginId) {
        if (!(this_present_userLoginId && that_present_userLoginId))
          return false;
        if (!this.userLoginId.equals(that.userLoginId))
          return false;
      }

      boolean this_present_permissions = true && this.isSetPermissions();
      boolean that_present_permissions = true && that.isSetPermissions();
      if (this_present_permissions || that_present_permissions) {
        if (!(this_present_permissions && that_present_permissions))
          return false;
        if (!this.permissions.equals(that.permissions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userLoginId = true && (isSetUserLoginId());
      list.add(present_userLoginId);
      if (present_userLoginId)
        list.add(userLoginId);

      boolean present_permissions = true && (isSetPermissions());
      list.add(present_permissions);
      if (present_permissions)
        list.add(permissions);

      return list.hashCode();
    }

    @Override
    public int compareTo(hasPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserLoginId()).compareTo(other.isSetUserLoginId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserLoginId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLoginId, other.userLoginId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPermissions()).compareTo(other.isSetPermissions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPermissions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permissions, other.permissions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hasPermission_args(");
      boolean first = true;

      sb.append("userLoginId:");
      if (this.userLoginId == null) {
        sb.append("null");
      } else {
        sb.append(this.userLoginId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("permissions:");
      if (this.permissions == null) {
        sb.append("null");
      } else {
        sb.append(this.permissions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hasPermission_argsStandardSchemeFactory implements SchemeFactory {
      public hasPermission_argsStandardScheme getScheme() {
        return new hasPermission_argsStandardScheme();
      }
    }

    private static class hasPermission_argsStandardScheme extends StandardScheme<hasPermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hasPermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_LOGIN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userLoginId = iprot.readString();
                struct.setUserLoginIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PERMISSIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                  struct.permissions = new ArrayList<String>(_list10.size);
                  String _elem11;
                  for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                  {
                    _elem11 = iprot.readString();
                    struct.permissions.add(_elem11);
                  }
                  iprot.readListEnd();
                }
                struct.setPermissionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hasPermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userLoginId != null) {
          oprot.writeFieldBegin(USER_LOGIN_ID_FIELD_DESC);
          oprot.writeString(struct.userLoginId);
          oprot.writeFieldEnd();
        }
        if (struct.permissions != null) {
          oprot.writeFieldBegin(PERMISSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.permissions.size()));
            for (String _iter13 : struct.permissions)
            {
              oprot.writeString(_iter13);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hasPermission_argsTupleSchemeFactory implements SchemeFactory {
      public hasPermission_argsTupleScheme getScheme() {
        return new hasPermission_argsTupleScheme();
      }
    }

    private static class hasPermission_argsTupleScheme extends TupleScheme<hasPermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hasPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserLoginId()) {
          optionals.set(0);
        }
        if (struct.isSetPermissions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserLoginId()) {
          oprot.writeString(struct.userLoginId);
        }
        if (struct.isSetPermissions()) {
          {
            oprot.writeI32(struct.permissions.size());
            for (String _iter14 : struct.permissions)
            {
              oprot.writeString(_iter14);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hasPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userLoginId = iprot.readString();
          struct.setUserLoginIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.permissions = new ArrayList<String>(_list15.size);
            String _elem16;
            for (int _i17 = 0; _i17 < _list15.size; ++_i17)
            {
              _elem16 = iprot.readString();
              struct.permissions.add(_elem16);
            }
          }
          struct.setPermissionsIsSet(true);
        }
      }
    }

  }

  public static class hasPermission_result implements org.apache.thrift.TBase<hasPermission_result, hasPermission_result._Fields>, java.io.Serializable, Cloneable, Comparable<hasPermission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hasPermission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hasPermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hasPermission_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hasPermission_result.class, metaDataMap);
    }

    public hasPermission_result() {
    }

    public hasPermission_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hasPermission_result(hasPermission_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public hasPermission_result deepCopy() {
      return new hasPermission_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public hasPermission_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hasPermission_result)
        return this.equals((hasPermission_result)that);
      return false;
    }

    public boolean equals(hasPermission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(hasPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hasPermission_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hasPermission_resultStandardSchemeFactory implements SchemeFactory {
      public hasPermission_resultStandardScheme getScheme() {
        return new hasPermission_resultStandardScheme();
      }
    }

    private static class hasPermission_resultStandardScheme extends StandardScheme<hasPermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hasPermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map18.size);
                  String _key19;
                  String _val20;
                  for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                  {
                    _key19 = iprot.readString();
                    _val20 = iprot.readString();
                    struct.success.put(_key19, _val20);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hasPermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter22 : struct.success.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              oprot.writeString(_iter22.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hasPermission_resultTupleSchemeFactory implements SchemeFactory {
      public hasPermission_resultTupleScheme getScheme() {
        return new hasPermission_resultTupleScheme();
      }
    }

    private static class hasPermission_resultTupleScheme extends TupleScheme<hasPermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hasPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter23 : struct.success.entrySet())
            {
              oprot.writeString(_iter23.getKey());
              oprot.writeString(_iter23.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hasPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map24.size);
            String _key25;
            String _val26;
            for (int _i27 = 0; _i27 < _map24.size; ++_i27)
            {
              _key25 = iprot.readString();
              _val26 = iprot.readString();
              struct.success.put(_key25, _val26);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class hasEntityPermission_args implements org.apache.thrift.TBase<hasEntityPermission_args, hasEntityPermission_args._Fields>, java.io.Serializable, Cloneable, Comparable<hasEntityPermission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hasEntityPermission_args");

    private static final org.apache.thrift.protocol.TField USER_LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userLoginId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("actions", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hasEntityPermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hasEntityPermission_argsTupleSchemeFactory());
    }

    public String userLoginId; // required
    public List<String> entities; // required
    public List<String> actions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_LOGIN_ID((short)1, "userLoginId"),
      ENTITIES((short)2, "entities"),
      ACTIONS((short)3, "actions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_LOGIN_ID
            return USER_LOGIN_ID;
          case 2: // ENTITIES
            return ENTITIES;
          case 3: // ACTIONS
            return ACTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("userLoginId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ACTIONS, new org.apache.thrift.meta_data.FieldMetaData("actions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hasEntityPermission_args.class, metaDataMap);
    }

    public hasEntityPermission_args() {
    }

    public hasEntityPermission_args(
      String userLoginId,
      List<String> entities,
      List<String> actions)
    {
      this();
      this.userLoginId = userLoginId;
      this.entities = entities;
      this.actions = actions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hasEntityPermission_args(hasEntityPermission_args other) {
      if (other.isSetUserLoginId()) {
        this.userLoginId = other.userLoginId;
      }
      if (other.isSetEntities()) {
        List<String> __this__entities = new ArrayList<String>(other.entities);
        this.entities = __this__entities;
      }
      if (other.isSetActions()) {
        List<String> __this__actions = new ArrayList<String>(other.actions);
        this.actions = __this__actions;
      }
    }

    public hasEntityPermission_args deepCopy() {
      return new hasEntityPermission_args(this);
    }

    @Override
    public void clear() {
      this.userLoginId = null;
      this.entities = null;
      this.actions = null;
    }

    public String getUserLoginId() {
      return this.userLoginId;
    }

    public hasEntityPermission_args setUserLoginId(String userLoginId) {
      this.userLoginId = userLoginId;
      return this;
    }

    public void unsetUserLoginId() {
      this.userLoginId = null;
    }

    /** Returns true if field userLoginId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserLoginId() {
      return this.userLoginId != null;
    }

    public void setUserLoginIdIsSet(boolean value) {
      if (!value) {
        this.userLoginId = null;
      }
    }

    public int getEntitiesSize() {
      return (this.entities == null) ? 0 : this.entities.size();
    }

    public java.util.Iterator<String> getEntitiesIterator() {
      return (this.entities == null) ? null : this.entities.iterator();
    }

    public void addToEntities(String elem) {
      if (this.entities == null) {
        this.entities = new ArrayList<String>();
      }
      this.entities.add(elem);
    }

    public List<String> getEntities() {
      return this.entities;
    }

    public hasEntityPermission_args setEntities(List<String> entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public int getActionsSize() {
      return (this.actions == null) ? 0 : this.actions.size();
    }

    public java.util.Iterator<String> getActionsIterator() {
      return (this.actions == null) ? null : this.actions.iterator();
    }

    public void addToActions(String elem) {
      if (this.actions == null) {
        this.actions = new ArrayList<String>();
      }
      this.actions.add(elem);
    }

    public List<String> getActions() {
      return this.actions;
    }

    public hasEntityPermission_args setActions(List<String> actions) {
      this.actions = actions;
      return this;
    }

    public void unsetActions() {
      this.actions = null;
    }

    /** Returns true if field actions is set (has been assigned a value) and false otherwise */
    public boolean isSetActions() {
      return this.actions != null;
    }

    public void setActionsIsSet(boolean value) {
      if (!value) {
        this.actions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_LOGIN_ID:
        if (value == null) {
          unsetUserLoginId();
        } else {
          setUserLoginId((String)value);
        }
        break;

      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((List<String>)value);
        }
        break;

      case ACTIONS:
        if (value == null) {
          unsetActions();
        } else {
          setActions((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_LOGIN_ID:
        return getUserLoginId();

      case ENTITIES:
        return getEntities();

      case ACTIONS:
        return getActions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_LOGIN_ID:
        return isSetUserLoginId();
      case ENTITIES:
        return isSetEntities();
      case ACTIONS:
        return isSetActions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hasEntityPermission_args)
        return this.equals((hasEntityPermission_args)that);
      return false;
    }

    public boolean equals(hasEntityPermission_args that) {
      if (that == null)
        return false;

      boolean this_present_userLoginId = true && this.isSetUserLoginId();
      boolean that_present_userLoginId = true && that.isSetUserLoginId();
      if (this_present_userLoginId || that_present_userLoginId) {
        if (!(this_present_userLoginId && that_present_userLoginId))
          return false;
        if (!this.userLoginId.equals(that.userLoginId))
          return false;
      }

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      boolean this_present_actions = true && this.isSetActions();
      boolean that_present_actions = true && that.isSetActions();
      if (this_present_actions || that_present_actions) {
        if (!(this_present_actions && that_present_actions))
          return false;
        if (!this.actions.equals(that.actions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userLoginId = true && (isSetUserLoginId());
      list.add(present_userLoginId);
      if (present_userLoginId)
        list.add(userLoginId);

      boolean present_entities = true && (isSetEntities());
      list.add(present_entities);
      if (present_entities)
        list.add(entities);

      boolean present_actions = true && (isSetActions());
      list.add(present_actions);
      if (present_actions)
        list.add(actions);

      return list.hashCode();
    }

    @Override
    public int compareTo(hasEntityPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserLoginId()).compareTo(other.isSetUserLoginId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserLoginId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLoginId, other.userLoginId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActions()).compareTo(other.isSetActions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actions, other.actions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hasEntityPermission_args(");
      boolean first = true;

      sb.append("userLoginId:");
      if (this.userLoginId == null) {
        sb.append("null");
      } else {
        sb.append(this.userLoginId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("actions:");
      if (this.actions == null) {
        sb.append("null");
      } else {
        sb.append(this.actions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hasEntityPermission_argsStandardSchemeFactory implements SchemeFactory {
      public hasEntityPermission_argsStandardScheme getScheme() {
        return new hasEntityPermission_argsStandardScheme();
      }
    }

    private static class hasEntityPermission_argsStandardScheme extends StandardScheme<hasEntityPermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hasEntityPermission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_LOGIN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userLoginId = iprot.readString();
                struct.setUserLoginIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                  struct.entities = new ArrayList<String>(_list28.size);
                  String _elem29;
                  for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                  {
                    _elem29 = iprot.readString();
                    struct.entities.add(_elem29);
                  }
                  iprot.readListEnd();
                }
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
                  struct.actions = new ArrayList<String>(_list31.size);
                  String _elem32;
                  for (int _i33 = 0; _i33 < _list31.size; ++_i33)
                  {
                    _elem32 = iprot.readString();
                    struct.actions.add(_elem32);
                  }
                  iprot.readListEnd();
                }
                struct.setActionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hasEntityPermission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userLoginId != null) {
          oprot.writeFieldBegin(USER_LOGIN_ID_FIELD_DESC);
          oprot.writeString(struct.userLoginId);
          oprot.writeFieldEnd();
        }
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entities.size()));
            for (String _iter34 : struct.entities)
            {
              oprot.writeString(_iter34);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.actions != null) {
          oprot.writeFieldBegin(ACTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.actions.size()));
            for (String _iter35 : struct.actions)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hasEntityPermission_argsTupleSchemeFactory implements SchemeFactory {
      public hasEntityPermission_argsTupleScheme getScheme() {
        return new hasEntityPermission_argsTupleScheme();
      }
    }

    private static class hasEntityPermission_argsTupleScheme extends TupleScheme<hasEntityPermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hasEntityPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserLoginId()) {
          optionals.set(0);
        }
        if (struct.isSetEntities()) {
          optionals.set(1);
        }
        if (struct.isSetActions()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserLoginId()) {
          oprot.writeString(struct.userLoginId);
        }
        if (struct.isSetEntities()) {
          {
            oprot.writeI32(struct.entities.size());
            for (String _iter36 : struct.entities)
            {
              oprot.writeString(_iter36);
            }
          }
        }
        if (struct.isSetActions()) {
          {
            oprot.writeI32(struct.actions.size());
            for (String _iter37 : struct.actions)
            {
              oprot.writeString(_iter37);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hasEntityPermission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userLoginId = iprot.readString();
          struct.setUserLoginIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list38 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entities = new ArrayList<String>(_list38.size);
            String _elem39;
            for (int _i40 = 0; _i40 < _list38.size; ++_i40)
            {
              _elem39 = iprot.readString();
              struct.entities.add(_elem39);
            }
          }
          struct.setEntitiesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.actions = new ArrayList<String>(_list41.size);
            String _elem42;
            for (int _i43 = 0; _i43 < _list41.size; ++_i43)
            {
              _elem42 = iprot.readString();
              struct.actions.add(_elem42);
            }
          }
          struct.setActionsIsSet(true);
        }
      }
    }

  }

  public static class hasEntityPermission_result implements org.apache.thrift.TBase<hasEntityPermission_result, hasEntityPermission_result._Fields>, java.io.Serializable, Cloneable, Comparable<hasEntityPermission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hasEntityPermission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hasEntityPermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hasEntityPermission_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hasEntityPermission_result.class, metaDataMap);
    }

    public hasEntityPermission_result() {
    }

    public hasEntityPermission_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hasEntityPermission_result(hasEntityPermission_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public hasEntityPermission_result deepCopy() {
      return new hasEntityPermission_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public hasEntityPermission_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hasEntityPermission_result)
        return this.equals((hasEntityPermission_result)that);
      return false;
    }

    public boolean equals(hasEntityPermission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(hasEntityPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hasEntityPermission_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hasEntityPermission_resultStandardSchemeFactory implements SchemeFactory {
      public hasEntityPermission_resultStandardScheme getScheme() {
        return new hasEntityPermission_resultStandardScheme();
      }
    }

    private static class hasEntityPermission_resultStandardScheme extends StandardScheme<hasEntityPermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hasEntityPermission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map44 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map44.size);
                  String _key45;
                  String _val46;
                  for (int _i47 = 0; _i47 < _map44.size; ++_i47)
                  {
                    _key45 = iprot.readString();
                    _val46 = iprot.readString();
                    struct.success.put(_key45, _val46);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hasEntityPermission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter48 : struct.success.entrySet())
            {
              oprot.writeString(_iter48.getKey());
              oprot.writeString(_iter48.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hasEntityPermission_resultTupleSchemeFactory implements SchemeFactory {
      public hasEntityPermission_resultTupleScheme getScheme() {
        return new hasEntityPermission_resultTupleScheme();
      }
    }

    private static class hasEntityPermission_resultTupleScheme extends TupleScheme<hasEntityPermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hasEntityPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter49 : struct.success.entrySet())
            {
              oprot.writeString(_iter49.getKey());
              oprot.writeString(_iter49.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hasEntityPermission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map50.size);
            String _key51;
            String _val52;
            for (int _i53 = 0; _i53 < _map50.size; ++_i53)
            {
              _key51 = iprot.readString();
              _val52 = iprot.readString();
              struct.success.put(_key51, _val52);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
